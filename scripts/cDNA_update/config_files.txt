>>ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/Config/General.pm
package Bio::EnsEMBL::Pipeline::Config::General;

use strict;
use vars qw(%Config);
%Config = (
  RENAME_ON_RETRY         => 1,
  SGE_PERL5LIB_ENV_SCRIPT => "",
);

>>ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/Config/BatchQueue.pm
package Bio::EnsEMBL::Pipeline::Config::BatchQueue;

use strict;
use vars qw(%Config);
%Config = (
  QUEUE_MANAGER         => 'LSF',
  DEFAULT_BATCH_SIZE    => 10,
  DEFAULT_RETRIES       => 3,
  DEFAULT_BATCH_QUEUE   => 'normal',
  DEFAULT_SUB_ARGS      => '',
  DEFAULT_OUTPUT_DIR    => '<outDIR>',
  DEFAULT_CLEANUP       => 'yes',
  DEFAULT_RESOURCE      => '',
  DEFAULT_VERBOSITY     => 'WARNING',
  AUTO_JOB_UPDATE       => 1,
  JOB_LIMIT             => 10000,
  JOB_STATUSES_TO_COUNT => ['PEND'],     # RUN, PEND, SSUSP, EXIT, DONE
  MARK_AWOL_JOBS        => 1,
  MAX_JOB_SLEEP         => 3600,
  MIN_JOB_SLEEP         => 120,
  SLEEP_PER_JOB         => 30,
  DEFAULT_RUNNABLEDB_PATH => 'Bio/EnsEMBL/Analysis/RunnableDB',
  DEFAULT_RUNNER          => '',
  DEFAULT_RETRY_QUEUE     => 'long',
  DEFAULT_RETRY_SUB_ARGS  => '-M4000',
  DEFAULT_RETRY_RESOURCE  => 'select[mem>4000] rusage[mem=4000]',
  DEFAULT_LSF_PRE_EXEC_PERL =>'/usr/local/ensembl32/bin/perl', # ONLY use 32bit perl for lsf -pre-exec jobs
  DEFAULT_LSF_PERL          =>'/usr/local/ensembl32/bin/perl', # ONLY use ensembl64/bin/perl for memory jobs > 4 gb
  QUEUE_CONFIG => [
    {  logic_name => '<newFeatureName>',
       batch_size => <BATCH_SIZE>,
       resource   => '<RESOURCE>',
       #'model=IBMBC2800',
       # or 'select[mem>2000] rusage[mem=2000]'
       # to limit mysql 'select[linux && myia64g<800] rusage[myia64g=10:duration=20:decay=1]
       retries         => 1,
       sub_args        => '',
       runner          => '',
       queue           => 'normal',
       output_dir      => '<outDIR>',
       cleanup         => 'no',
       runnabledb_path => 'Bio/EnsEMBL/Analysis/RunnableDB', }
  ]
);

>>ensembl-analysis/modules/Bio/EnsEMBL/Analysis/Config/General.pm
package Bio::EnsEMBL::Analysis::Config::General;

use strict;
use vars qw(%Config);
%Config = (
    #BIN_DIR  => '/usr/local/ensembl/bin',
    #DATA_DIR => '/usr/local/ensembl/data',
    #LIB_DIR  => '/usr/local/ensembl/lib',

    BIN_DIR  => '/software/ensembl/genebuild/usrlocalensemblbin/',
    DATA_DIR => '/software/ensembl/genebuild/usrlocalensembldata/',
    LIB_DIR  => '/software/ensembl/genebuild/usrlocalensembllib/',
   
    ANALYSIS_WORK_DIR       => '/tmp',
    ANALYSIS_REPEAT_MASKING => ['RepeatMask'],
    CORE_VERBOSITY          => 'WARNING',
    LOGGER_VERBOSITY        => 'OFF',
);

>>ensembl-analysis/modules/Bio/EnsEMBL/Analysis/Config/Exonerate2Genes.pm
package Bio::EnsEMBL::Analysis::Config::Exonerate2Genes;

use strict;
use vars qw(%Config);
%Config = (
    EXONERATE_CONFIG_BY_LOGIC => {
        DEFAULT => { GENOMICSEQS         => '<masked_genome>',
                     QUERYTYPE           => undef,
                     QUERYSEQS           => undef,
                     IIDREGEXP           => undef,
                     OUTDB               => undef,
                     FILTER              => undef,
                     COVERAGE_BY_ALIGNED => undef,
                     OPTIONS             => undef,
                     NONREF_REGIONS      => 1,
        },
        <newFeatureName> => {
            GENOMICSEQS => '<masked_genome>',
            QUERYTYPE   => 'dna',
            QUERYSEQS   => '<chunkDIR>',
            OUTDB       => {
                       -dbname => '<OUTPUT_DBNAME>',
                       -host   => '<OUTPUT_DBHOST>',
                       -port   => '<OUTPUT_DBPORT>',
                       -user   => '<DBUSER>',
                       -pass   => '<DBPASS>',
            },
            COVERAGE_BY_ALIGNED => 1,
            FILTER              => {
                OBJECT     => 'Bio::EnsEMBL::Analysis::Tools::CdnaUpdateTranscriptFilter',
                PARAMETERS => {
                    -coverage                 => 90,
                    -percent_id               => 97,
                    -best_in_genome           => 1,
                    -reject_processed_pseudos => 1,
                    -verbosity                => 0,
                },
            },
            OPTIONS => "--model est2genome --forwardcoordinates FALSE --softmasktarget TRUE --exhaustive FALSE --score 500 --saturatethreshold 100 --dnahspthreshold 60 --dnawordlen 14",
        },
    }
);

>>ensembl-analysis/modules/Bio/EnsEMBL/Analysis/Config/GeneBuild/KillListFilter.pm
package Bio::EnsEMBL::Analysis::Config::GeneBuild::KillListFilter;

use strict;
use vars qw( %Config );
%Config = (
    KILL_LIST_CONFIG => {

        DEFAULT => {
            GB_REF_DB => { -dbname => '',
                           -host   => '',
                           -port   => '3306',
                           -user   => 'ensro',
            },
            KILL_LIST_DB => { -dbname => 'gb_kill_list',
                              -host   => 'genebuild6',
                              -port   => '3306',
                              -user   => 'ensro',
                              -pass   => '',
            },
            FILTER_PARAMS => {
                # can only be protein, cDNA, EST.
                -only_mol_type => 'cDNA',

                # kill_list will not return entries that have an
                # entry in the kill_object_analysis table for these
                # analysis_ids ie. accession removed from the
                # kill-list will have been set to 'allowed' for these
                # analyses below
                -for_analyses => ['cdna_update'],

                # kill_list will not return accessions that have an
                # entry in the kill_object_species table for these
                # species_ids ie. accession removed from the kill-list
                # will have been set to 'allowed' for these species
                # below.
                -for_species => ['<taxonomy_id>'],    # ['10090'] = mouse, ['9606'] = human
            },
        },
        CDNA_UPDATE => {
            GB_REF_DB => { -dbname => '',
                           -host   => '',
                           -port   => '3306',
                           -user   => 'ensro',
            },
            KILL_LIST_DB => { -dbname => 'gb_kill_list',
                              -host   => 'genebuild6',
                              -port   => '3306',
                              -user   => 'ensro',
                              -pass   => '',
            },
            FILTER_PARAMS => {
                # can only be protein, cDNA, EST.
                -only_mol_type => 'cDNA',

                # kill_list will not return entries that have an
                # entry in the kill_object_analysis table for these
                # analysis_ids ie. accession removed from the
                # kill-list will have been set to 'allowed' for these
                # analyses below.
                -for_analyses => ['cdna_update'],

                # kill_list will not return accessions that have an
                # entry in the kill_object_species table for these
                # species_ids ie. accession removed from the kill-list
                # will have been set to 'allowed' for these species
                # below.
                -for_species => ['<taxonomy_id>'],    # ['10090'] = mouse, ['9606'] = human
            },
        },
    }, );

>>ensembl-analysis/modules/Bio/EnsEMBL/Analysis/Config/Databases.pm
package Bio::EnsEMBL::Analysis::Config::Databases ;

use strict;
use vars qw(%Config);
%Config = (

    DATABASES => {
        KILL_LIST_DB => { -dbname => 'gb_kill_list',
                          -host   => 'genebuild6',
                          -port   => '3306',
                          -user   => 'ensro',
                          -pass   => '',
        },
        REFERENCE_DB => { -dbname => '<PIPE_DBNAME>',
                          -host   => '<PIPE_DBHOST>',
                          -port   => '<PIPE_DBPORT>',
                          -user   => '<DBUSER>',
                          -pass   => '<DBPASS>',
        },

        EXONERATE_DB => { -dbname => '<OUTPUT_DBNAME>',
                          -host   => '<OUTPUT_DBHOST>',
                          -port   => '<OUTPUT_DBPORT>',
                          -user   => '<DBUSER>',
                          -pass   => '<DBPASS>',
        },
    },

    DNA_DBNAME => "REFERENCE_DB",

  #
  # Arrayref. to distributed dbs ( see POD on top of file )
  #

    DISTRIBUTED_DBS => {
                         DITAG_DB_DIST => [ "DB_COPY_1","DB_COPY_2"],
                       },
  #
  # MAIN_REFERENCE_DB should point to the database which is used as reference db. The MAIN_REFERENCE_DB
  # key is used in some cloud-based modules to automatically create new databaes. The 'vital tables' array
  # specifies which tables are dumped by some modules.
  #

  MAIN_REFERENCE_DB => "REFERENCE_DB",
  VITAL_TABLES => ["analysis",
                   "analysis_description",
                   "assembly",
                   "assembly_exception",
                   "attrib_type",
                   "coord_system",
                   "external_db",
                   "meta",
                   "meta_coord",
                   "seq_region",
                   "seq_region_attrib",
                  ],

);
