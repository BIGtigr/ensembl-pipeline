#!/usr/local/ensembl/bin/perl


# Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


=head1 Run_protein_RunnableDB

=head2 Description

The purpose of this perl script is to run the ensembl protein analysis runnables.
This script is called by submit_prot_analysis.pl

=cut

use strict;
use Getopt::Long qw(:config no_ignore_case);

BEGIN {
    require "Bio/EnsEMBL/Pipeline/Prot_analysis_Conf.pl";
}




use Bio::EnsEMBL::Pipeline::DBSQL::DBAdaptor;
use Bio::EnsEMBL::DBLoader;

my $host   = '';
my $port   = 3306;
my $dbname = '';
my $dbuser = 'ensro';
my $dbpass = undef;
my $runnable;
my $input_id;
my $analysisid;
my $write  = 0;
my $check  = 0;
my $params;
my $all;

my %db_conf =  %::db_conf;

my %scripts_conf = %::scripts_conf;

#Get DBs variablesl



GetOptions( 
	     'dbhost|host|h:s'    => \$host,
	     'dbport|port|P:n'    => \$port,
	     'dbname|db|D:s'    => \$dbname,
	     'dbuser|user|u:s'    => \$dbuser,
	     'dbpass|pass|p:s'    => \$dbpass,
	     'input_id:s'  => \$input_id,
	     'runnable:s'  => \$runnable,
	     'analysis:n'  => \$analysisid,
	     'write'       => \$write,
             'check'       => \$check,
             'parameters:s'=> \$params,
	     );

$| = 1;

die "No runnable entered" unless defined ($runnable);
$runnable = "Bio::EnsEMBL::Pipeline::$runnable"
 unless $runnable =~ /Bio::EnsEMBL::Pipeline/;

(my $file = $runnable) =~ s/::/\//g;
require "$file.pm";

if ($check) {
   exit(0);
}
my $db = new Bio::EnsEMBL::DBSQL::DBAdaptor(
    -host             => $host,
    -user             => $dbuser,
    -port             => $port,
    -dbname           => $dbname,
    -pass             => $dbpass,
    -perlonlyfeatures => 0
);

if ($runnable =~ /Hmmpfam/) {
    print STDERR "INPUT_ID: $input_id\n";
    my @subm = split(/:/,$input_id);
    foreach my $i(@subm) {
	print STDERR "ID: $i\n";
	if($i) {
	    my $sf;
	    my $analysis = $db->get_AnalysisAdaptor->fetch_by_dbID($analysisid);
	    my %hparams;
	    
	    foreach my $p(split /,/, $params){
		my @sp = split /=/, $p;
		$sp[0] = '-' . $sp[0];
		$hparams{$sp[0]} =  $sp[1];
	    }
	    
	    my $runobj = "$runnable"->new(-db    => $db,
					  -input_id => $i,
					  -analysis => $analysis,
					  -seqfetcher => $sf,
					  %hparams,
					  );
	    $runobj->fetch_input;
	    $runobj->run;
	    $runobj->write_output;
	}
    }
}

else {
    my $sf;
    

    my $analysis = $db->get_AnalysisAdaptor->fetch_by_dbID($analysisid);
    

    my %hparams;

    foreach my $p(split /,/, $params){
	my @sp = split /=/, $p;
	$sp[0] = '-' . $sp[0];
  $hparams{$sp[0]} =  $sp[1];
    }
    
    my $runobj = "$runnable"->new(-db    => $db,
				  -input_id => $input_id,
				  -analysis => $analysis,
				  -seqfetcher => $sf,
				  %hparams,
				  );

    $runobj->fetch_input;
    $runobj->run;
    



    $runobj->write_output;
}




